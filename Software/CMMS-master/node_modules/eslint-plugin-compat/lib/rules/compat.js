"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash.memoize"));

var _Lint = require("../Lint");

var _Versioning = _interopRequireWildcard(require("../Versioning"));

var _providers = require("../providers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getName(node) {
  switch (node.type) {
    case 'NewExpression':
      {
        return node.callee.name;
      }

    case 'MemberExpression':
      {
        return node.object.name;
      }

    case 'CallExpression':
      {
        return node.callee.name;
      }

    default:
      throw new Error('not found');
  }
}

function generateErrorName(rule) {
  if (rule.name) return rule.name;
  if (rule.property) return `${rule.object}.${rule.property}()`;
  return rule.object;
}

const getPolyfillSet = (0, _lodash.default)(polyfillArrayJSON => new Set(JSON.parse(polyfillArrayJSON)));

function isPolyfilled(context, rule) {
  if (!context.settings.polyfills) return false;
  const polyfills = getPolyfillSet(JSON.stringify(context.settings.polyfills));
  return (// v2 allowed users to select polyfills based off their caniuseId. This is
    // no longer supported. Keeping this here to avoid breaking changes.
    polyfills.has(rule.id) || // Check if polyfill is provided (ex. `Promise.all`)
    polyfills.has(rule.protoChainId) || // Check if entire API is polyfilled (ex. `Promise`)
    polyfills.has(rule.protoChain[0])
  );
}

const getRulesForTargets = (0, _lodash.default)(targetsJSON => {
  const targets = JSON.parse(targetsJSON);
  const result = {
    CallExpression: [],
    NewExpression: [],
    MemberExpression: []
  };

  _providers.rules.forEach(rule => {
    if (rule.getUnsupportedTargets(rule, targets).length === 0) return;
    result[rule.astNodeType].push(rule);
  });

  return result;
});
var _default = {
  meta: {
    docs: {
      description: 'Ensure cross-browser API compatibility',
      category: 'Compatibility',
      url: 'https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md',
      recommended: true
    },
    fixable: 'code',
    schema: [{
      type: 'string'
    }]
  },

  create(context) {
    // Determine lowest targets from browserslist config, which reads user's
    // package.json config section. Use config from eslintrc for testing purposes
    const browserslistConfig = context.settings.browsers || context.settings.targets || context.options[0];
    const browserslistTargets = (0, _Versioning.Versioning)((0, _Versioning.default)(context.getFilename(), browserslistConfig)); // Stringify to support memoization; browserslistConfig is always an array of new objects.

    const targetedRules = getRulesForTargets(JSON.stringify(browserslistTargets));
    const errors = [];

    function handleFailingRule(rule, node) {
      if (isPolyfilled(context, rule)) return;
      errors.push({
        node,
        message: [generateErrorName(rule), 'is not supported in', rule.getUnsupportedTargets(rule, browserslistTargets).join(', ')].join(' ')
      });
    }

    const identifiers = new Set();
    return {
      CallExpression: _Lint.lintCallExpression.bind(null, handleFailingRule, targetedRules.CallExpression),
      NewExpression: _Lint.lintNewExpression.bind(null, handleFailingRule, targetedRules.NewExpression),
      MemberExpression: _Lint.lintMemberExpression.bind(null, handleFailingRule, targetedRules.MemberExpression),

      // Keep track of all the defined variables. Do not report errors for nodes that are not defined
      Identifier(node) {
        if (node.parent) {
          const {
            type
          } = node.parent;

          if ( // ex. const { Set } = require('immutable');
          type === 'Property' || // ex. function Set() {}
          type === 'FunctionDeclaration' || // ex. const Set = () => {}
          type === 'VariableDeclarator' || // ex. class Set {}
          type === 'ClassDeclaration' || // ex. import Set from 'set';
          type === 'ImportDefaultSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportDeclaration') {
            identifiers.add(node.name);
          }
        }
      },

      'Program:exit': () => {
        // Get a map of all the variables defined in the root scope (not the global scope)
        // const variablesMap = context.getScope().childScopes.map(e => e.set)[0];
        errors.filter(error => !identifiers.has(getName(error.node))).forEach(node => context.report(node));
      }
    };
  }

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,