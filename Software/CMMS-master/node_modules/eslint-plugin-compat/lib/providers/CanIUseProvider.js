"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUnsupportedTargets = getUnsupportedTargets;
exports.default = exports.targetMetadata = void 0;

var _data = _interopRequireDefault(require("caniuse-db/fulldata-json/data-2.0.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// HACK: modern targets should be determined once at runtime
const targetMetadata = {
  targets: ['chrome', 'firefox', 'opera', 'safari', 'ie', 'edge', 'ios_saf', 'op_mini', 'android', 'bb', 'op_mob', 'and_chr', 'and_ff', 'ie_mob', 'and_uc', 'samsung', 'baidu', 'kaios']
};
exports.targetMetadata = targetMetadata;
const targetNameMappings = {
  chrome: 'Chrome',
  firefox: 'Firefox',
  opera: 'Opera',
  baidu: 'Baidu',
  and_qq: 'QQ Browser',
  safari: 'Safari',
  android: 'Android Browser',
  ie: 'IE',
  edge: 'Edge',
  ios_saf: 'iOS Safari',
  op_mini: 'Opera Mini',
  bb: 'Blackberry Browser',
  op_mob: 'Opera Mobile',
  and_chr: 'Android Chrome',
  and_ff: 'Android Firefox',
  ie_mob: 'IE Mobile',
  and_uc: 'Android UC Browser',
  samsung: 'Samsung Browser',
  kaios: 'KaiOS'
};
/**
 * Take a target's id and return it's full name by using `targetNameMappings`
 * ex. {target: and_ff, version: 40} => 'Android FireFox 40'
 */

function formatTargetNames(target) {
  const name = targetNameMappings[target.target] || target.target;
  return `${name} ${target.version}`;
}
/**
 * Check if a browser version is in the range format
 * ex. 10.0-10.2
 */


function versionIsRange(version) {
  return version.includes('-');
}
/**
 * Parse version from caniuse and compare with parsed version from browserslist.
 */


function compareRanges(targetVersion, statsVersion) {
  return targetVersion === parseFloat(statsVersion);
}
/*
 * Check the CanIUse database to see if targets are supported
 */


function isNotSupportedByCaniuse(node, {
  version,
  target,
  parsedVersion
}) {
  const {
    stats
  } = _data.default.data[node.caniuseId];
  if (!(target in stats)) return true;
  const targetStats = stats[target];

  if (versionIsRange(version)) {
    return Object.keys(targetStats).some(statsVersion => versionIsRange(statsVersion) && compareRanges(parsedVersion, statsVersion) ? !targetStats[statsVersion].includes('y') : false);
  } // @TODO: This assumes that all versions are included in the cainuse db. If this is incorrect,
  //        this will return false negatives To properly do this, we have to to range comparisons.
  //        Ex. given query for 50 and only version 40 exists in db records, return true


  if (!(version in targetStats)) return true;
  return targetStats[version] && !targetStats[version].includes('y');
}
/**
 * Return an array of all unsupported targets
 */


function getUnsupportedTargets(node, targets) {
  return targets.filter(target => isNotSupportedByCaniuse(node, target)).map(formatTargetNames);
}

const CanIUseProvider = [// new ServiceWorker()
{
  caniuseId: 'serviceworkers',
  astNodeType: 'NewExpression',
  object: 'ServiceWorker'
}, {
  caniuseId: 'serviceworkers',
  astNodeType: 'MemberExpression',
  object: 'navigator',
  property: 'serviceWorker'
}, // document.querySelector()
{
  caniuseId: 'queryselector',
  astNodeType: 'MemberExpression',
  object: 'document',
  property: 'querySelector'
}, // IntersectionObserver
{
  caniuseId: 'intersectionobserver',
  astNodeType: 'NewExpression',
  object: 'IntersectionObserver'
}, // ResizeObserver
{
  caniuseId: 'resizeobserver',
  astNodeType: 'NewExpression',
  object: 'ResizeObserver'
}, // PaymentRequest
{
  caniuseId: 'payment-request',
  astNodeType: 'NewExpression',
  object: 'PaymentRequest'
}, // Promises
{
  caniuseId: 'promises',
  astNodeType: 'NewExpression',
  object: 'Promise'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'resolve'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'all'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'race'
}, {
  caniuseId: 'promises',
  astNodeType: 'MemberExpression',
  object: 'Promise',
  property: 'reject'
}, // fetch
{
  caniuseId: 'fetch',
  astNodeType: 'CallExpression',
  object: 'fetch'
}, // document.currentScript()
{
  caniuseId: 'document-currentscript',
  astNodeType: 'MemberExpression',
  object: 'document',
  property: 'currentScript'
}, // URL
{
  caniuseId: 'url',
  astNodeType: 'NewExpression',
  object: 'URL'
}, // URLSearchParams
{
  caniuseId: 'urlsearchparams',
  astNodeType: 'NewExpression',
  object: 'URLSearchParams'
}, // performance.now()
{
  caniuseId: 'high-resolution-time',
  astNodeType: 'MemberExpression',
  object: 'performance',
  property: 'now'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'TypedArray'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Int8Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Uint8Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Uint8ClampedArray'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Int16Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Uint16Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Int32Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Uint32Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Float32Array'
}, {
  caniuseId: 'typedarrays',
  astNodeType: 'NewExpression',
  object: 'Float64Array'
}].map(rule => _objectSpread({}, rule, {
  getUnsupportedTargets,
  id: rule.property ? `${rule.object}.${rule.property}` : rule.object,
  protoChainId: rule.property ? `${rule.object}.${rule.property}` : rule.object,
  protoChain: rule.property ? [rule.object, rule.property] : [rule.object]
}));
var _default = CanIUseProvider;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,